using System.Collections.Generic;
using System.Threading.Tasks;
using Tharga.Reporter.Engine.Entity;
using Tharga.Reporter.Engine.Entity.Element;
using Tharga.Toolkit.Console.Command.Base;

namespace Tharga.Reporter.SampleConsole.Commands.PdfCommands
{
    public class CreateManual : ActionCommandBase
    {
        public CreateManual()
            : base("manual", "create a manual for how to use tharga reporter.")
        {
        }

        public override async Task<bool> InvokeAsync(string paramList)
        {
            //var index = 0;
            //var language = QueryParam<string>("Language", GetParam(paramList, index++), () => new List<KeyValuePair<string, string>> { new KeyValuePair<string, string>("English", "English"), new KeyValuePair<string, string>("Svenska", "Svenska") });
            var language = "English";

            var template = GetTemplate();
            var data = GetData(language);

            var documentProperties = new DocumentProperties
            {
                Title = data.Get("Title"),
                Author = "Daniel Bohlin",
                Creator = "Daniel Bohlin",
                Subject = "This is a manual for Tharga reporter generated by the tharga reporter itself."
            };

            await PdfCommand.RenderPdfAsync(template, documentProperties, data, true);

            return true;
        }

        private DocumentData GetData(string language)
        {
            var documentData = new DocumentData();

            switch (language)
            {
                case "English":
                    documentData.Add("Title", "Manual for Tharga Reporter");
                    break;
                case "Svenska":
                    documentData.Add("Title", "Manual för Tharga Reporter");
                    break;
            }

            return documentData;
        }

        private Template GetTemplate()
        {
            var frontPageSection = new Section { Name = "Cover" };
            frontPageSection.Pane.ElementList.Add(new Text { Value = "{Title}", Top = "10cm", Font = new Font { Size = 22 }, TextAlignment = TextBase.Alignment.Center });

            var marginRectangle = new UnitRectangle { Left = "3cm", Top = "1cm", Bottom = "1cm", Right = "1cm" };
            var indexSection = new Section { Name = "Index", Margin = marginRectangle, Header = { Height = "3cm" }, Footer = { Height = "3cm" } };
            indexSection.Header.ElementList.Add(new Text { Value = "{Title}" });
            indexSection.Footer.ElementList.Add(new Text { Value = "Page {PageNumber} of {TotalPages}." });

            var contentSection = new Section { Name = "Content", Margin = marginRectangle, Footer = indexSection.Footer, Header = indexSection.Header };
            var contentReferencePoint = new ReferencePoint { Stack = ReferencePoint.StackMethod.Vertical };
            contentSection.Pane.ElementList.Add(contentReferencePoint);
            contentReferencePoint.ElementList.Add(new Text { Font = new Font { Size = 18 }, Value = "Brief" });
            contentReferencePoint.ElementList.Add(new TextBox { Value = "The purpose of Tharga Reporter is really not to create documents like this. The main purpose is to easily create documents like invoices, delivery notes, orders, forms or other types of reports that contains much variable data. Creating the manual this way even made me find some strange bugs that I would have never found just creating invoices as I have done many times before. The code have actually been used for over five years in production. The reason for me to put the source on github is so that others can use it too, and modify it if required." });
            contentReferencePoint.ElementList.Add(new Text { Font = new Font { Size = 18 }, Value = "Document Structure" });
            contentReferencePoint.ElementList.Add(new TextBox { Value = "A document is structured by creating several sections" });

            var template = new Template(frontPageSection);
            template.SectionList.Add(indexSection);
            template.SectionList.Add(contentSection);
            return template;
        }
    }
}